/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    // ListNode* findSlow(ListNode *head){
    //     ListNode *fast = head;
    //     ListNode *slow = head;
    //     if(fast->next!=NULL or fast->next->next!=NULL) return false;
    //     else{
    //         fast = fast->next->next;
    //         slow = slow->next;
    //     }
    //     return true;
    // }
    bool hasCycle(ListNode *head) {
        
        ListNode *fast = head;
        ListNode *slow = head;
        // while(slow!=fast){
        //     if(fast->next==NULL or fast->next->next==NULL) return false;
        // else{
        //     fast = fast->next->next;
        //     slow = slow->next;
        // }
        // }
        // return true;
        while(fast!=NULL and fast->next!=NULL){
            slow = slow->next;
            fast = fast->next->next;
            if(slow ==  fast) return true;
        }
        return false;
    }
};
