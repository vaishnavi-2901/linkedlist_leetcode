/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeInBetween(ListNode* list1, int a, int b, ListNode* list2) {
        ListNode* curr = list1;
        ListNode* prev = list1;
        int aa = a;
        while(a-- and curr and curr->next){
            prev = curr;
            curr=curr->next;
        }
        b = (b-aa)+1;
        cout<<b<<endl;
        while(b-- and curr->next){
            prev->next = curr->next;
            curr = curr->next;
        }
        cout<<prev->val; //insert
        prev->next = list2;
        while(list2 and list2->next) list2=list2->next;
        cout<<list2->val;
        list2->next = curr;
        return list1;
    }
};
